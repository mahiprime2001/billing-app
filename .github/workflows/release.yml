name: "Tauri Cross-Platform Auto Release"
on:
  push:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  actions: read
jobs:
  calculate-version:
    runs-on: ubuntu-22.04
    outputs:
      next_version: ${{ steps.calculate.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: sudo apt-get install -y jq
      - id: calculate
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then TYPE="patch"
          else TYPE="patch"; fi
          TAURI_FILE=src-tauri/tauri.conf.json
          OLD_VERSION=$(jq -r '.version' $TAURI_FILE)
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Could not find version in $TAURI_FILE"
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
  build:
    needs: calculate-version
    outputs:
      version: ${{ needs.calculate-version.outputs.next_version }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
    runs-on: ${{ matrix.platform }}
    env:
      VERSION: ${{ needs.calculate-version.outputs.next_version }}
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-deps-
      - run: npm ci
      - run: npx tauri build

      - name: Decode key/password and sign MSI
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "üîë Signing the .msi installer..."
          
          try {
            $privateKeyBytes = [Convert]::FromBase64String($env:TAURI_PRIVATE_KEY)
            [IO.File]::WriteAllBytes("private.key", $privateKeyBytes)
            
            $passwordBytes = [Convert]::FromBase64String($env:TAURI_KEY_PASSWORD)
            $decodedPassword = [Text.Encoding]::UTF8.GetString($passwordBytes)
            
            if (-not (Test-Path "private.key")) {
              Write-Host "‚ùå Failed to create private.key"
              exit 1
            }
            
            $msi = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter "*.msi" -ErrorAction SilentlyContinue | Select-Object -First 1
            if (-not $msi) {
              Write-Host "‚ùå No MSI files found to sign"
              exit 1
            }
            Write-Host "üì¶ MSI to sign: $($msi.FullName)"
            
            $out = "src-tauri/target/release/bundle/latest.json"
            npx tauri signer sign `
              --private-key private.key `
              --password "$decodedPassword" `
              --version "$env:VERSION" `
              --files "$($msi.FullName)" `
              --output "$out" `
              --verbose
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "‚ùå Signing failed (exit code $LASTEXITCODE)"
              exit $LASTEXITCODE
            }
            
            if (-not (Test-Path $out)) {
              Write-Host "‚ùå latest.json not found at $out"
              Get-ChildItem -Recurse "src-tauri/target/release/bundle" | Format-List FullName
              exit 1
            }
            
            Write-Host "‚úÖ latest.json created at $out"
          } catch {
            Write-Host "‚ùå Error: $($_.Exception.Message)"
            exit 1
          } finally {
            if (Test-Path "private.key") { Remove-Item "private.key" -Force }
          }

      - name: Verify signing output
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $out = "src-tauri/target/release/bundle/latest.json"
          if (Test-Path $out) {
            Write-Host "‚úÖ Signing completed successfully"
            Get-Content $out | Write-Host
          } else {
            Write-Host "‚ùå latest.json not found after signing!"
            Get-ChildItem -Recurse "src-tauri/target/release/bundle" | Format-List FullName
            exit 1
          }

      - name: Copy latest.json for release
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $dest = "src-tauri/target/release/bundle/latest.json"
          if (Test-Path $dest) {
            Write-Host "‚úÖ latest.json ready at $dest"
          } else {
            Write-Host "‚ùå latest.json missing"
            exit 1
          }

      - uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/
  bump-and-release:
    needs: build
    runs-on: ubuntu-22.04
    if: success()
    env:
      VERSION: ${{ needs.build.outputs.version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Safety check for VERSION
        run: test -n "$VERSION"
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Update version in configs
        shell: bash
        run: |
          git pull origin main
          jq ".version=\"$VERSION\"" package.json > tmp.json && mv tmp.json package.json
          jq ".version=\"$VERSION\"" src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          UPDATE_URL="https://github.com/${{ github.repository }}/releases/latest/download/latest.json"
          jq ".plugins.updater.endpoints=[\"$UPDATE_URL\"]" src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json src-tauri/tauri.conf.json
          git commit -m "chore: bump version to $VERSION [skip ci]" || echo "No changes"
          git tag -d v$VERSION || true
          git push origin :refs/tags/v$VERSION || true
          git tag v$VERSION
          git push origin main --tags
      - name: Generate changelog
        id: changelog
        run: |
          CURR_TAG=v$VERSION
          PREV_TAG=$(git describe --tags --abbrev=0 --exclude="$CURR_TAG" 2>/dev/null || echo "")
          DATE=$(date -u +"%Y-%m-%d")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          {
            echo "## $CURR_TAG - $DATE"
            echo "### ‚ú® Features"
            git log $RANGE --grep="^feat:" --pretty=format:"- %s" || echo "- None"
            echo ""
            echo "### üêõ Fixes"
            git log $RANGE --grep="^fix:" --pretty=format:"- %s" || echo "- None"
            echo ""
            echo "### üí• Breaking Changes"
            git log $RANGE --grep="BREAKING CHANGE" --pretty=format:"- %s" || echo "- None"
          } > new_changelog.md
          CHANGELOG_B64=$(base64 -w0 new_changelog.md)
          echo "changelog_base64=$CHANGELOG_B64" >> $GITHUB_OUTPUT
      - name: Commit changelog
        shell: bash
        run: |
          mv new_changelog.md CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v$VERSION [skip ci]" || echo "No changes"
          git push origin main
      - name: Create GitHub Release
        shell: bash
        run: |
          CHANGELOG_DECODED=$(echo "${{ steps.changelog.outputs.changelog_base64 }}" | base64 --decode)
          LATEST_JSON=$(find artifacts -name "latest.json" -type f | head -1)
          if [ -n "$LATEST_JSON" ]; then
            gh release create "v$VERSION" \
              "artifacts/tauri-windows-latest/"* \
              "$LATEST_JSON" \
              --title "Release v$VERSION" \
              --notes "$CHANGELOG_DECODED"
          else
            gh release create "v$VERSION" \
              "artifacts/tauri-windows-latest/"* \
              --title "Release v$VERSION" \
              --notes "$CHANGELOG_DECODED"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

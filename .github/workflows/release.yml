name: "Tauri Windows Auto Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  calculate-version:
    runs-on: ubuntu-22.04
    outputs:
      next_version: ${{ steps.calculate.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: sudo apt-get install -y jq

      - id: calculate
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then TYPE="patch"
          else TYPE="patch"; fi
          TAURI_FILE=src-tauri/tauri.conf.json
          OLD_VERSION=$(jq -r '.version' $TAURI_FILE)
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Could not find version in $TAURI_FILE"
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: calculate-version
    outputs:
      version: ${{ needs.calculate-version.outputs.next_version }}
    runs-on: windows-latest
    env:
      VERSION: ${{ needs.calculate-version.outputs.next_version }}
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci

      - name: Update version in tauri.conf.json
        shell: pwsh
        run: |
          $tauriFile = "src-tauri/tauri.conf.json"
          if (-Not (Test-Path $tauriFile)) {
            Write-Host "‚ùå $tauriFile not found"
            exit 1
          }
          $content = Get-Content $tauriFile -Raw | ConvertFrom-Json
          $content.version = "$env:VERSION"
          $content | ConvertTo-Json -Depth 10 | Set-Content $tauriFile -Encoding utf8
          Write-Host "‚úÖ Updated version in $tauriFile to $env:VERSION"

      - name: Build with Tauri
        shell: pwsh
        run: |
          Write-Host "üöß Starting Tauri build..."
          npx tauri build

      - name: Write private key from secret
        shell: pwsh
        run: |
          if (-not $env:TAURI_SIGNING_PRIVATE_KEY) {
            Write-Host "‚ö†Ô∏è TAURI_SIGNING_PRIVATE_KEY is not set, skipping writing private.key"
            exit 0
          }
          Write-Host "üîë Writing private.key file"
          $env:TAURI_SIGNING_PRIVATE_KEY | Out-File -FilePath private.key -Encoding ascii

      - name: Prepare password variable
        shell: pwsh
        run: |
          $pwd = $env:TAURI_SIGNING_PRIVATE_KEY_PASSWORD
          if ($null -eq $pwd) { $pwd = "" }
          "`$decodedPassword = '$pwd'" | Out-File decodedPassword.ps1 -Encoding utf8

      - name: Verify environment and files before signing
        shell: pwsh
        run: |
          Write-Host "‚úÖ Checking environment variables"
          if ($env:VERSION) { Write-Host "VERSION=$env:VERSION" } else { Write-Host "‚ùå VERSION not set"; exit 1 }
          if ($env:TAURI_SIGNING_PRIVATE_KEY) { Write-Host "Private key is set" } else { Write-Host "‚ö†Ô∏è Private key not set; may skip signing" }
          Write-Host "Listing built files:"
          Get-ChildItem -Recurse "src-tauri/target/release/bundle" | Format-List FullName

      - name: Sign MSI and create latest.json
        shell: pwsh
        run: |
          Write-Host "üì¶ Creating output directory"
          $outDir = "src-tauri/target/release/bundle"
          New-Item -ItemType Directory -Path $outDir -Force | Out-Null

          Write-Host "üì¶ Searching for MSI file"
          $msi = Get-ChildItem -Path "$outDir/msi" -Filter "*.msi" | Select-Object -First 1
          if (-not $msi) {
            Write-Host "‚ùå No MSI file found"
            Get-ChildItem -Recurse $outDir | Format-List FullName
            exit 1
          }
          Write-Host "‚úÖ Found MSI: $($msi.FullName)"

          # Relative path for Windows
          $msiRelative = Resolve-Path -Relative $msi.FullName

          $privateKeyArg = ""
          if (Test-Path "private.key") { $privateKeyArg = "--private-key private.key" }

          . .\decodedPassword.ps1

          $cmd = @(
              "npx tauri signer sign",
              $privateKeyArg,
              "--password `"$decodedPassword`"",
              "--version `"$env:VERSION`"",
              "--files `"$msiRelative`"",
              "--output-dir `"$outDir`"",
              "--verbose"
          ) -join " "

          Write-Host "üü† Running command:"
          Write-Host $cmd
          Invoke-Expression $cmd

          $latestJson = Join-Path $outDir "latest.json"
          if (-not (Test-Path $latestJson)) {
              Write-Host "‚ùå latest.json not created!"
              Get-ChildItem -Recurse $outDir | Format-List FullName
              exit 1
          }

          Write-Host "‚úÖ latest.json created at $latestJson"

      - name: Cleanup sensitive files
        shell: pwsh
        run: |
          Remove-Item "private.key","decodedPassword.ps1" -Force -ErrorAction SilentlyContinue

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-windows
          path: src-tauri/target/release/bundle/

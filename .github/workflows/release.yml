name: "Tauri Windows Auto Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  prepare-environment:
    name: üßÆ Prepare Version & Environment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate.outputs.version }}
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Install dependencies
        run: sudo apt-get install -y jq

      - id: calculate
        shell: bash
        run: |
          set -euo pipefail
          TAURI_FILE="src-tauri/tauri.conf.json"
          git fetch --tags --force
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then TYPE="patch"
          else TYPE="patch"; fi
          OLD_VERSION=$(jq -r '.version' "$TAURI_FILE")
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Version not found in $TAURI_FILE"
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          while git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; do
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: üìù Update version in Tauri config
        run: |
          jq ".version = \"${{ steps.calculate.outputs.version }}\"" src-tauri/tauri.conf.json > tmp.$$.json && mv tmp.$$.json src-tauri/tauri.conf.json

      - name: üíæ Commit updated version to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src-tauri/tauri.conf.json
          git commit -m "chore: bump version to v${{ steps.calculate.outputs.version }}" || echo "No version changes to commit"
          git push origin HEAD:main

      - name: üè∑Ô∏è Create and push tag
        run: |
          git tag "v${{ steps.calculate.outputs.version }}" || echo "Tag exists"
          git push origin "v${{ steps.calculate.outputs.version }}" || echo "‚ö†Ô∏è Tag already exists, continuing"

  build-and-release-windows:
    name: ü™ü Build & Release Windows
    needs: prepare-environment
    runs-on: windows-latest
    steps:
      - name: üõí Checkout code (latest main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: üß∞ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Install dependencies
        run: npm install

      - name: üóùÔ∏è Wrap raw updater key into PEM env
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          
          # Load raw key (make throw non-fatal for debug; will fail later if empty)
          $rawKey = "${{ secrets.TAURI_UPDATER_PRIVATE_KEY }}".Trim()
          if (-not $rawKey) {
            Write-Host "‚ö†Ô∏è Raw updater key secret is empty or not set. Skipping signing (build may fail if required)."
            echo "TAURI_SIGNER_KEY=" >> $env:GITHUB_ENV
            echo "TAURI_SIGNER_PASSWORD=" >> $env:GITHUB_ENV
            exit 0
          }

          # Fold base64 to 64-char lines (PEM standard)
          $folded = $rawKey -replace '(.{64})', "$1`n"

          # Build full PEM string (assume PKCS#8; if key starts with 'MIG' or 'MIIB' etc., change to RSA header below)
          $pem = "-----BEGIN PRIVATE KEY-----`n$folded`n-----END PRIVATE KEY-----"
          # Alternative for RSA: "-----BEGIN RSA PRIVATE KEY-----`n$folded`n-----END RSA PRIVATE KEY-----"

          # Debug (masked)
          Write-Host "Wrapped PEM lines: $($pem -split '`n').Count"
          Write-Host "First 50 chars masked: $($pem.Substring(0, [Math]::Min(50, $pem.Length)) -replace '.', '*')"

          # Set env for Tauri build auto-signing
          echo "TAURI_SIGNER_KEY=$pem" >> $env:GITHUB_ENV
          echo "TAURI_SIGNER_PASSWORD=${{ secrets.TAURI_UPDATER_KEY_PASSWORD }}" >> $env:GITHUB_ENV

      - name: üèóÔ∏è Build Tauri App (Windows) with Auto-Signing
        env:
          TAURI_SIGNER_KEY: ${{ env.TAURI_SIGNER_KEY }}
          TAURI_SIGNER_PASSWORD: ${{ env.TAURI_SIGNER_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npx @tauri-apps/cli build

      - name: üì¶ Prepare Updater Assets (Zip, Read Sigs, update.json)
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $bundleDir = "src-tauri/target/release/bundle"
          $version = "${{ needs.prepare-environment.outputs.version }}"
          $repo = $env:GITHUB_REPOSITORY
          $tag = "v$version"

          # Find bundles and auto-generated sigs (or fallback if missing)
          $msi = Get-ChildItem -Path "$bundleDir/msi" -Filter "*.msi" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          $msiSig = Get-ChildItem -Path "$bundleDir/msi" -Filter "*.sig" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          $exe = Get-ChildItem -Path "$bundleDir/nsis" -Filter "*setup.exe" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          $exeSig = Get-ChildItem -Path "$bundleDir/nsis" -Filter "*.sig" | Sort-Object LastWriteTime -Descending | Select-Object -First 1

          if (-not $msi -or -not $exe) { throw "Missing bundle files (MSI/EXE not found)" }

          # Handle sigs if exist (else placeholder or skip signing check)
          $msiSigContent = if ($msiSig) { Get-Content -Path $msiSig.FullName -Raw -Encoding UTF8 } else { Write-Host "No MSI .sig found"; "" }
          $exeSigContent = if ($exeSig) { Get-Content -Path $exeSig.FullName -Raw -Encoding UTF8 } else { Write-Host "No EXE .sig found"; "" }

          # Zip bundles
          $msiZip = "$bundleDir/msi/$($msi.Name).zip"
          $exeZip = "$bundleDir/nsis/$($exe.Name).zip"
          Compress-Archive -Path $msi.FullName -DestinationPath $msiZip -Force
          Compress-Archive -Path $exe.FullName -DestinationPath $exeZip -Force

          Write-Host "Created MSI ZIP: $msiZip"
          Write-Host "Created EXE ZIP: $exeZip"

          # Generate update.json (use empty sig if missing)
          $pubDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          $msiZipName = [System.Uri]::EscapeDataString($(Split-Path $msiZip -Leaf))
          $exeZipName = [System.Uri]::EscapeDataString($(Split-Path $exeZip -Leaf))
          $msiUrl = "https://github.com/$repo/releases/download/$tag/$msiZipName"
          $exeUrl = "https://github.com/$repo/releases/download/$tag/$exeZipName"

          $updateJson = @{
            version = $version
            notes = "üöÄ Added auto-update support and fixed minor bugs."
            pub_date = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                signature = $msiSigContent.Trim()
                url = $msiUrl
              }
              "windows-x86_64-nsis" = @{
                signature = $exeSigContent.Trim()
                url = $exeUrl
              }
            }
          } | ConvertTo-Json -Depth 6

          $updatePath = "$bundleDir/update.json"
          $updateJson | Out-File -FilePath $updatePath -Encoding UTF8
          # Validate JSON (install jq if needed, or skip)
          Write-Host "Generated update.json (sig may be empty if signing skipped)"

          # Set assets (space-separated)
          $assets = "$msiZip $exeZip $updatePath"
          echo "ASSETS=$assets" >> $env:GITHUB_ENV

      - name: üöÄ Create or Update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tag = "v${{ needs.prepare-environment.outputs.version }}"
          $assets = $env:ASSETS -split ' '

          gh auth status

          # Create if not exists
          gh release view $tag --repo $env:GITHUB_REPOSITORY
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag --title "Siri Admin App $tag" --notes "Automated Tauri Windows release with updater support for version $tag" --repo $env:GITHUB_REPOSITORY
          }

          # Upload assets
          foreach ($asset in $assets) {
            if (Test-Path $asset) {
              Write-Host "Uploading $asset..."
              gh release upload $tag $asset --clobber --repo $env:GITHUB_REPOSITORY
            }
          }

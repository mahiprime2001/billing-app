name: "Tauri Windows Auto Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  prepare-environment:
    name: üßÆ Prepare Version & Environment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate.outputs.version }}
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Install dependencies
        run: sudo apt-get install -y jq

      - id: calculate
        shell: bash
        run: |
          set -euo pipefail

          TAURI_FILE="src-tauri/tauri.conf.json"

          # Ensure tags available locally
          git fetch --tags --force

          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}

          # Determine bump type from commit messages
          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then TYPE="patch"
          else TYPE="patch"; fi

          OLD_VERSION=$(jq -r '.version' "$TAURI_FILE")
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Version not found in $TAURI_FILE"
            exit 1
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"

          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          # Ensure unique tag
          while git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; do
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done

          echo "‚úÖ Calculated new unique version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: üìù Update version in Tauri config
        run: |
          jq ".version = \"${{ steps.calculate.outputs.version }}\"" src-tauri/tauri.conf.json > tmp.$$.json && mv tmp.$$.json src-tauri/tauri.conf.json

      - name: üíæ Commit updated version to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src-tauri/tauri.conf.json
          git commit -m "chore: bump version to v${{ steps.calculate.outputs.version }}" || echo "No version changes to commit"
          git push origin HEAD:main

      - name: üè∑Ô∏è Create and push tag
        run: |
          git tag "v${{ steps.calculate.outputs.version }}" || echo "Tag exists"
          git push origin "v${{ steps.calculate.outputs.version }}" || echo "‚ö†Ô∏è Tag already exists, continuing"

  build-and-release-windows:
    name: ü™ü Build & Release Windows
    needs: prepare-environment
    runs-on: windows-latest
    steps:
      - name: üõí Checkout code (latest main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: üß∞ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: üì¶ Install dependencies & build frontend
        run: |
          npm install
          npm run build

      - name: üèóÔ∏è Build Tauri App (Windows)
        env:
          # Map your existing secrets to Tauri v2 signing env names
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npx @tauri-apps/cli build

      - name: üöÄ Create or Update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="v${{ needs.prepare-environment.outputs.version }}"
          MSI_PATH="src-tauri/target/release/bundle/msi/Siri-billing-app_${{ needs.prepare-environment.outputs.version }}_x64_en-US.msi"
          EXE_PATH="src-tauri/target/release/bundle/nsis/Siri-billing-app_${{ needs.prepare-environment.outputs.version }}_x64-setup.exe"

          echo "üß© Checking for build outputs..."
          ls -la src-tauri/target/release/bundle || echo "‚ö†Ô∏è No bundle folders found."

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Release $TAG already exists, updating assets..."
            gh release upload "$TAG" "$MSI_PATH" "$EXE_PATH" --clobber || echo "‚ÑπÔ∏è No assets to replace."
          else
            echo "üÜï Creating new release $TAG"
            gh release create "$TAG" "$MSI_PATH" "$EXE_PATH" \
              --title "Siri Billing App $TAG" \
              --notes "Automated Tauri Windows release (.msi and .exe) for version $TAG"
          fi

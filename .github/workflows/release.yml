name: "Tauri Windows Auto Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  prepare-environment:
    name: üßÆ Prepare Version & Environment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate.outputs.version }}
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Install dependencies
        run: sudo apt-get install -y jq

      - id: calculate
        shell: bash
        run: |
          set -euo pipefail
          TAURI_FILE="src-tauri/tauri.conf.json"
          git fetch --tags --force
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then TYPE="patch"
          else TYPE="patch"; fi
          OLD_VERSION=$(jq -r '.version' "$TAURI_FILE")
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Version not found in $TAURI_FILE"
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          while git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; do
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          done
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: üìù Update version in Tauri config
        run: |
          jq ".version = \"${{ steps.calculate.outputs.version }}\"" src-tauri/tauri.conf.json > tmp.$$.json && mv tmp.$$.json src-tauri/tauri.conf.json

      - name: üíæ Commit updated version to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src-tauri/tauri.conf.json
          git commit -m "chore: bump version to v${{ steps.calculate.outputs.version }}" || echo "No version changes to commit"
          git push origin HEAD:main

      - name: üè∑Ô∏è Create and push tag
        run: |
          git tag "v${{ steps.calculate.outputs.version }}" || echo "Tag exists"
          git push origin "v${{ steps.calculate.outputs.version }}" || echo "‚ö†Ô∏è Tag already exists, continuing"

  build-and-release-windows:
    name: ü™ü Build & Release Windows
    needs: prepare-environment
    runs-on: windows-latest
    steps:
      - name: üõí Checkout code (latest main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: üß∞ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Install dependencies & build frontend
        run: |
          npm install
          npm run build

      - name: üèóÔ∏è Build Tauri App (Windows)
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npx @tauri-apps/cli build

      - name: üì¶ Prepare Updater Assets (Zip & Sign Bundles)
        env:
          TAURI_UPDATER_PRIVATE_KEY: ${{ secrets.TAURI_UPDATER_PRIVATE_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          BUNDLE_DIR="src-tauri/target/release/bundle"
          VERSION="${{ needs.prepare-environment.outputs.version }}"
          REPO="${{ github.repository }}"
          TAG="v$VERSION"

          # Find bundles
          MSI_FILE=$(find "$BUNDLE_DIR/msi" -name "*.msi" | head -1)
          EXE_FILE=$(find "$BUNDLE_DIR/nsis" -name "*setup.exe" | head -1)

          if [ -z "$MSI_FILE" ] || [ -z "$EXE_FILE" ]; then
            echo "‚ùå No bundle files found!"
            exit 1
          fi

          echo "Found MSI: $MSI_FILE"
          echo "Found EXE: $EXE_FILE"

          # Zip MSI and EXE for updater (convention: .msi.zip and .exe.zip)
          MSI_ZIP="$BUNDLE_DIR/msi/Siri-billing-app_${VERSION}_x64_en-US.msi.zip"
          EXE_ZIP="$BUNDLE_DIR/nsis/Siri-billing-app_${VERSION}_x64-setup.exe.zip"
          7z a "$MSI_ZIP" "$MSI_FILE" || echo "‚ö†Ô∏è Zipping MSI failed, using direct file"
          7z a "$EXE_ZIP" "$EXE_FILE" || echo "‚ö†Ô∏è Zipping EXE failed, using direct file"

          # Use zips if created, else fall back to originals
          MSI_ASSET="${MSI_ZIP:-$MSI_FILE}"
          EXE_ASSET="${EXE_ZIP:-$EXE_FILE}"

          # Sign zips (or originals) with updater key (requires 7z for zip, tauri signer)
          MSI_SIG="$MSI_ASSET.sig"
          EXE_SIG="$EXE_ASSET.sig"
          echo "$TAURI_UPDATER_PRIVATE_KEY" | npx @tauri-apps/cli signer sign --private-key - "$MSI_ASSET" -o "$MSI_SIG"
          echo "$TAURI_UPDATER_PRIVATE_KEY" | npx @tauri-apps/cli signer sign --private-key - "$EXE_ASSET" -o "$EXE_SIG"

          # Read sig contents (raw signature string)
          MSI_SIGNATURE=$(cat "$MSI_SIG" | base64 -w 0)  # Base64 if needed; docs expect raw but often base64
          EXE_SIGNATURE=$(cat "$EXE_SIG" | base64 -w 0)

          # Generate update.json
          PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat > "$BUNDLE_DIR/update.json" << EOF
          {
            "version": "$VERSION",
            "notes": "üöÄ Automated release for v$VERSION. Check changelog for details.",
            "pub_date": "$PUB_DATE",
            "platforms": {
              "windows-x86_64": {
                "signature": "$MSI_SIGNATURE",
                "url": "https://github.com/$REPO/releases/download/$TAG/$(basename "$MSI_ASSET")"
              }
            }
          }
          EOF

          # For NSIS EXE, add if desired (updater prefers MSI for Windows typically)
          # But include both if multi-installer setup
          cat >> "$BUNDLE_DIR/update.json" << EOF
          ,
              "windows-x86_64-nsis": {
                "signature": "$EXE_SIGNATURE",
                "url": "https://github.com/$REPO/releases/download/$TAG/$(basename "$EXE_ASSET")"
              }
          EOF  # Note: Adjust JSON if adding; use jq for proper merging

          echo "Generated update.json:"
          cat "$BUNDLE_DIR/update.json"

          # Assets for release: bundles, zips, sigs, update.json
          ASSETS=("$MSI_ASSET" "$EXE_ASSET" "$MSI_SIG" "$EXE_SIG" "$BUNDLE_DIR/update.json")
          echo "ASSETS<<EOF" >> $GITHUB_ENV
          for asset in "${ASSETS[@]}"; do echo "$asset" >> $GITHUB_ENV; done
          echo "EOF" >> $GITHUB_ENV

      - name: üöÄ Create or Update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="v${{ needs.prepare-environment.outputs.version }}"
          ASSETS=$(cat << 'EOF' | tr '\n' ' '
          ${{ env.ASSETS }}
          EOF
          )

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Release $TAG already exists, updating assets..."
            gh release upload "$TAG" $ASSETS --clobber || echo "‚ÑπÔ∏è No assets to replace."
          else
            echo "üÜï Creating new release $TAG"
            gh release create "$TAG" $ASSETS \
              --title "Siri Billing App $TAG" \
              --notes "Automated Tauri Windows release with updater support for version $TAG"
          fi

          # Rename upload to latest.json for updater endpoint
          gh release upload "$TAG" "src-tauri/target/release/bundle/update.json" latest.json --clobber

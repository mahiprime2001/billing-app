// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/billing/history/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/billing/history">> = Specific
  const handler = {} as typeof import("../../app/billing/history/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/billing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/billing">> = Specific
  const handler = {} as typeof import("../../app/billing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/billing/print/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/billing/print/[id]">> = Specific
  const handler = {} as typeof import("../../app/billing/print/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/analytics/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/analytics">> = Specific
  const handler = {} as typeof import("../../app/dashboard/analytics/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/billing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/billing">> = Specific
  const handler = {} as typeof import("../../app/dashboard/billing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/products/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/products">> = Specific
  const handler = {} as typeof import("../../app/dashboard/products/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/settings">> = Specific
  const handler = {} as typeof import("../../app/dashboard/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/stores/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/stores">> = Specific
  const handler = {} as typeof import("../../app/dashboard/stores/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/users">> = Specific
  const handler = {} as typeof import("../../app/dashboard/users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/forgot-password-proxy/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/forgot-password-proxy">> = Specific
  const handler = {} as typeof import("../../app/api/auth/forgot-password-proxy/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/login/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/login">> = Specific
  const handler = {} as typeof import("../../app/api/auth/login/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bills/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bills/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/bills/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bills/import/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bills/import">> = Specific
  const handler = {} as typeof import("../../app/api/bills/import/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/bills/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/bills">> = Specific
  const handler = {} as typeof import("../../app/api/bills/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/notifications/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/notifications">> = Specific
  const handler = {} as typeof import("../../app/api/notifications/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/products/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/products/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/products/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/products/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/products">> = Specific
  const handler = {} as typeof import("../../app/api/products/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/settings/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/settings">> = Specific
  const handler = {} as typeof import("../../app/api/settings/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/stores/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/stores/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/stores/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/stores/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/stores">> = Specific
  const handler = {} as typeof import("../../app/api/stores/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/[id]/password/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/[id]/password">> = Specific
  const handler = {} as typeof import("../../app/api/users/[id]/password/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/users/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/users/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users">> = Specific
  const handler = {} as typeof import("../../app/api/users/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

# Application metadata
appId: com.siri.admin.app
productName: Siri Admin App
copyright: Copyright © 2025 Siri Admin
version: 0.2.0
description: Siri Admin Application for billing and inventory management
# Use environment variable for version if available, otherwise fallback to hardcoded version
version: ${VERSION:-0.2.0}
# Set the build version to match the app version
buildVersion: ${VERSION:-0.2.0}

# Build configuration
build:
  appId: com.siri.admin.app
  productName: Siri Admin App
  copyright: Copyright © 2025 Siri Admin
  asar: true
  asarUnpack:
    - "**/node_modules/sqlite3/**/*"
    - "**/node_modules/ref-*"
    - "**/node_modules/ffi-*"
    - "**/node_modules/fs-extra/**/*"
  # Enable compression for better download and startup performance
  compression: maximum
  # Remove console logs in production
  removePackageScripts: true
  # Generate source maps for better debugging
  generateUpdatesFilesForAllChannels: true
  # Enable differential updates for smaller update sizes
  publish:
    provider: github
    releaseType: draft
  # Include necessary files for auto-update
  extraResources:
    - from: "public"
      to: "public"
      filter: ["**/*"]

# Files to include in the build
files:
  - "out/**/*"
  - "main.js"
  - "preload.js"
  - "package.json"
  - "next.config.mjs"
  - "public/**/*"
  - "app/data/**/*"
  - "node_modules/**/*"
  - "!.next"
  - "!**/node_modules/.cache"
  - "!**/node_modules/aws-sdk"
  - "!**/node_modules/electron"
  - "!**/node_modules/electron-builder"
  - "!**/node_modules/electron-rebuild"

# Output directories
directories:
  buildResources: "build"
  output: "release"
  app: "."

# Windows configuration
win:
  target: 
    - target: nsis
      arch: ["x64", "ia32"]  # Support both 64-bit and 32-bit Windows
  icon: "public/placeholder-logo.ico"
  requestedExecutionLevel: asInvoker
  publisherName: "Siri Admin"
  fileAssociations:
    - ext: pdf
      name: PDF Document
      description: PDF File
      icon: public/pdf-icon.ico
  signingHashAlgorithms: ["sha256"]
  verifyUpdateCodeSignature: true
  # Windows Store configuration if needed
  # msix: ""
  # Windows signing configuration (replace with your actual certificate)
  certificateFile: ""
  certificatePassword: ""
  # Additional Windows specific settings
  rfc3161TimeStampServer: "http://timestamp.digicert.com"
  timeStampServer: "http://timestamp.digicert.com"

# NSIS installer configuration
nsis:
  oneClick: false  # Set to true for a one-click installer
  perMachine: false  # Install for current user only by default
  allowElevation: true  # Allow requesting admin privileges if needed
  allowToChangeInstallationDirectory: true
  createDesktopShortcut: true
  createStartMenuShortcut: true
  shortcutName: "Siri Admin App"
  deleteAppDataOnUninstall: true  # Clean up app data on uninstall
  uninstallDisplayName: "Siri Admin App"
  license: "license.txt"
  installerIcon: "public/placeholder-logo.ico"
  uninstallerIcon: "public/placeholder-logo.ico"
  installerHeader: "public/installer-header.bmp"
  installerSidebar: "public/installer-sidebar.bmp"
  uninstallerSidebar: "public/installer-sidebar.bmp"
  include: "build/installer.nsh"
  # Custom installer and uninstaller scripts
  script: "build/installer.nsi"
  # Multi-language support
  multiLanguageInstaller: true
  # Compression settings
  compression: zlib  # Or lzma for better compression but slower install
  # Custom messages
  menuCategory: "Siri Admin"
  # Additional NSIS commands
  artifactName: "${productName}-${version}-${os}-${arch}.${ext}"

# macOS configuration
mac:
  category: public.app-category.business
  target: ["dmg", "zip", "mas"]  # Add mas for Mac App Store builds
  icon: "public/placeholder-logo.icns"
  hardenedRuntime: true
  gatekeeperAssess: false
  entitlements: "build/entitlements.mac.plist"
  entitlementsInherit: "build/entitlements.mac.plist"
  # Notarization settings (required for macOS 10.15+)
  notarize: true
  # Extend info with additional permissions
  extendInfo:
    NSCameraUsageDescription: "This app requires camera access to scan barcodes"
    NSMicrophoneUsageDescription: "This app requires microphone access for voice input"
    NSDocumentsFolderUsageDescription: "This app needs access to documents folder"
    NSDownloadsFolderUsageDescription: "This app needs access to downloads folder"
    NSBluetoothAlwaysUsageDescription: "This app requires Bluetooth for connecting to receipt printers"
    NSBluetoothPeripheralUsageDescription: "This app requires Bluetooth for connecting to receipt printers"
  # Mac App Store specific settings
  identity: ""  # Your Apple Developer ID
  provisioningProfile: ""  # Path to your provisioning profile

# Linux configuration
linux:
  target: ["AppImage", "deb", "rpm", "tar.xz", "pacman"]  # Add pacman for Arch Linux
  icon: "public/placeholder-logo.png"
  category: "Office"
  maintainer: "Siri Admin <admin@siriapp.com>"
  vendor: "Siri Admin"
  synopsis: "Billing and Inventory Management"
  # Linux specific settings
  desktop:
    Name: "Siri Admin App"
    Comment: "Billing and Inventory Management"
    GenericName: "Business Management"
    Categories: "Office;Finance;"
    Terminal: false
  # Package maintainer scripts
  afterInstall: "build/linux/after-install.sh"
  afterRemove: "build/linux/after-remove.sh"
  description: |
    Siri Admin is a comprehensive billing and inventory management solution
    for small to medium businesses.

# Publish configuration
publish:
  provider: github
  owner: your-github-username
  repo: your-repo-name
  private: false
  releaseType: draft

# Extra resources
extraResources:
  - from: "app/data"
    to: "app/data"
    filter: ["**/*"]

# Build hooks
afterPack: "./build/afterPack.js"
afterSign: "./build/afterSign.js"

generateUpdatesFilesForAllChannels: true

# Compression
compression: maximum

# Remove console logs in production
extraMetadata:
  main: "./out/main.js"
  version: 0.1.7
  dependencies:
    electron-updater: "^6.0.0"

# Environment variables
env:
  NODE_ENV: production
  ELECTRON_IS_DEV: 0

# Build version and build number
buildVersion: 1.0.0
buildNumber: 1
